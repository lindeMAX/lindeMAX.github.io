<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fourier on Max&#39; Blog</title>
    <link>https://lindemax.ddns.net/tags/fourier/</link>
    <description>Recent content in fourier on Max&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Dec 2021 16:13:00 +0100</lastBuildDate><atom:link href="https://lindemax.ddns.net/tags/fourier/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fourier Series in theory and with Python (Sawtooth and Square Waves)</title>
      <link>https://lindemax.ddns.net/sas/fourier_seris/</link>
      <pubDate>Sun, 05 Dec 2021 16:13:00 +0100</pubDate>
      
      <guid>https://lindemax.ddns.net/sas/fourier_seris/</guid>
      <description>In this post i&amp;rsquo;m giong to showing you how obtain the fourier coefficients of the complex fourier series for sawtooth and square waves. The approximation done by the fourier series (with a finite number of coefficients) is then compared to the original signal using a python script.
Sawtooth waves The coefficients can be obtained this way:
$$ \begin{eqnarray} c_k &amp;amp;=&amp;amp; \frac{1}{T} \int_0^T f(t) \cdot e^{-j2 \pi k \frac{t}{T}} ~ dt \newline f(t) &amp;amp;=&amp;amp; t ~~~~\text{for $0 &amp;lt; t \le T$} \end{eqnarray} $$</description>
    </item>
    
    <item>
      <title>DFT/FFT in theroy and with Python</title>
      <link>https://lindemax.ddns.net/sas/dft_fft/</link>
      <pubDate>Sat, 04 Dec 2021 19:05:00 +0100</pubDate>
      
      <guid>https://lindemax.ddns.net/sas/dft_fft/</guid>
      <description>Theory I wrote an article about DFT and FFT some time ago. You can view it inside your browser by clicking the link below. Currrently it&amp;rsquo;s only available in german. Please excuse this.
Article about DFT/FFT
Python The knowledge gained from the article can be used, to do something (actually not so) usefull. But you&amp;rsquo;ll get the idea ;-).
The script below will create two different sine functions. One with and one without additive noise.</description>
    </item>
    
    <item>
      <title>Convolution of Gaussians</title>
      <link>https://lindemax.ddns.net/sas/convolution_gaussians/</link>
      <pubDate>Sat, 04 Dec 2021 18:06:00 +0100</pubDate>
      
      <guid>https://lindemax.ddns.net/sas/convolution_gaussians/</guid>
      <description>Convolution of two Gaussians A convolution can be imagined as a weighting of one function with another. One of the functions is mirrored in the definition area and then pushed &amp;lsquo;piece by piece&amp;rsquo; (infinitissimally small pieces!) over the other. The result is again a function that returns the &amp;lsquo;superposition&amp;rsquo; of the two functions for each possible shift. If one imagines the convolution of two Gaussians, one can guess that the result must be a Gaussian funvtion (with slightly differed shape) again.</description>
    </item>
    
  </channel>
</rss>
